version: 2.1

orbs: 
  slack: circleci/slack@4.10.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Destroying environment: ${CIRCLE_WORKFLOW_ID:0:7}"
            aws s3 rb s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --force
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure https://kvdb.io/TzKNQZG86TWD5LmKYes24S/migration_${CIRCLE_WORKFLOW_ID:0:7})
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - slack/notify:
          event: fail
          template: basic_fail_1
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - slack/notify:
          channel: '#project'
          event: fail
          template: basic_fail_1
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Front-end test
          command: | 
            cd frontend
            npm install
            npm run test
      - slack/notify:
          event: fail
          template: basic_fail_1
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end test
          command: | 
            cd backend 
            npm install
            npm run test
      - slack/notify:
          event: fail
          template: basic_fail_1
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-buid]
      - run:
          name: Front-end Scan
          command: |
            cd frontend
            npm install
            npm audit --audit-level=critical
      - slack/notify:
          event: fail
          template: basic_fail_1
    
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-buid]
      - run:
          name: Back-end Scan
          command: |
            cd backend
            npm install
            npm audit --audit-level=critical
      - slack/notify:
          event: fail
          template: basic_fail_1
          
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: install dependencies
          command: |
              yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
              aws cloudformation deploy \
                  --template-file .circleci/files/backend.yml \
                  --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                  --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
                  --region ${AWS_DEFAULT_REGION} \
                  --tags project=udapeople
      - run:
          name: Ensure front-end infrastructure exist
          command: |
              aws cloudformation deploy \
                  --template-file .circleci/files/frontend.yml \
                  --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
                  --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
                  --region ${AWS_DEFAULT_REGION} \
                  --tags project=udapeople
      - run:
          name: Add back-end ip to ansible inventory
          command: |
              echo [web] > .circleci/ansible/inventory.txt

              aws ec2 describe-instances --region ${AWS_DEFAULT_REGION} --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --query "Reservations[*].Instances[*].PublicDnsName" --output text | grep ec2 | head -n1 >> .circleci/ansible/inventory.txt 
              cat .circleci/ansible/inventory.txt 

      - persist_to_workspace:
          root: .circleci/ansible
          paths:
            - inventory.txt
            
      - destroy-environment
  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11 
    steps:
      - checkout
      - run:
          name: SSH or Git CLI client 
          command: |
              apk add --update git openssh-client
      - add_ssh_keys:
          fingerprints: ["0c:88:d5:d9:05:32:b6:da:27:09:cf:37:6d:ff:30:dc"] 

      - attach_workspace:
          at: /tmp/.circleci/ansible
         
      - run:
          name: Install dependencies
          command: |
              apk add --no-cache \
              python3 \
              py3-pip \
              && pip3 install --upgrade pip \
              && pip3 install \
              awscli \
              && rm -rf /var/cache/apk/*
              apk add --update ansible
      - run:
          name: Configure server
          command: |
              cd .circleci/ansible/  
              cat inventory.txt
              ANSIBLE_HOST_KEY_CHECKING=0 ansible-playbook -i /tmp/.circleci/ansible/inventory.txt configure-server.yml
      - destroy-environment

  run-migrations:
    docker:
      - image: node:13.8.0-buster
        user: root
    steps:
      - checkout
      - run:
          name: install aws cli
          command: |
            apt -y update
            apt -y install awscli

      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to kvdb.io
          command: |
              if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
              then
                  curl https://kvdb.io/TzKNQZG86TWD5LmKYes24S/migration_${CIRCLE_WORKFLOW_ID:0:7} -d '1'
              fi
      - destroy-environment
      - revert-migrations
      
  deploy-frontend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: SSH or Git CLI client 
          command: |
              apk add --update git openssh-client
      - add_ssh_keys:
          fingerprints: ["0c:88:d5:d9:05:32:b6:da:27:09:cf:37:6d:ff:30:dc"] 
      - attach_workspace:
          at: /tmp/.circleci/ansible
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Install dependencies
          command: |
              apk add --no-cache \
              python3 \
              py3-pip \
              && pip3 install --upgrade pip \
              && pip3 install \
              awscli \
              && rm -rf /var/cache/apk/*
              apk add --update ansible
              apk add --update curl
              apk add --update nodejs
              apk add --update npm
              apk add --update tar                        
              apk add --update gzip
      - run:
          name: Get backend url
          command: |
              export BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople" \
              --output text)
              export API_URL="http://${BACKEND_IP}:3030"
              echo "API_URL = ${API_URL}"
              echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
              cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
              cd frontend
              npm install
              npm run build
              tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
              #aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
              aws s3 sync dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}
      - destroy-environment
      - revert-migrations

  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: SSH or Git CLI client 
          command: |
              apk add --update git openssh-client
      - add_ssh_keys:
          fingerprints: ["0c:88:d5:d9:05:32:b6:da:27:09:cf:37:6d:ff:30:dc"] 
      - attach_workspace:
          at: /tmp/.circleci/ansible
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Install backend dependencies
          command: |
              apk add --no-cache \
              python3 \
              py3-pip \
              && pip3 install --upgrade pip \
              && pip3 install \
              awscli \
              && rm -rf /var/cache/apk/*
              apk add --update ansible
              apk add --update curl
              apk add --update nodejs
              apk add --update npm
              apk add --update tar                        
              apk add --update gzip
      - run:
          name: build backend
          command: |
              cd /root/project/backend
              npm i

              echo ENVIROMENT=development > ".env"
              echo TYPEORM_CONNECTION=postgres >> ".env"
              echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> ".env"
              echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> ".env"
              echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> ".env"
              echo TYPEORM_HOST=$TYPEORM_HOST >> ".env"
              echo TYPEORM_PORT=$TYPEORM_PORT >> ".env"
              echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> ".env"
              echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> ".env"
              echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> ".env"

              npm run build
              npm run prestart:prod

      - run:
          name: zip file
          command: |
              cd /root/project/
              tar -zcvf udapeople_backend.tar.gz backend/
              ls .
              mv udapeople_backend.tar.gz .circleci/ansible/roles/deploy/files/ 

      - run:
          name: ansible configs
          command: |
              cd .circleci/ansible
              echo "[ssh_connection]" > ansible.cfg
              echo "scp_if_ssh=True" >> ansible.cfg

      - run:
          name: run ansible
          command: |
              cd .circleci/ansible
              echo "Contents  of the inventory.txt file is -------"
              cat /tmp/.circleci/ansible/inventory.txt
              ANSIBLE_HOST_KEY_CHECKING=0 ansible-playbook -i /tmp/.circleci/ansible/inventory.txt deploy-backend.yml
      - destroy-environment
      - revert-migrations

  smoke-test:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Backend smoke test.
          command: |
              export BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople" \
              --output text | head -n 1)
              echo "BACKEND IP = ${BACKEND_IP}"
              export API_URL="http://${BACKEND_IP}:3030"
              echo "API_URL = ${API_URL}"
              TRIES=40
              FAILED=0
              curl "${API_URL}/api/status" || FAILED=1
              while [ $FAILED -eq 1 ]
              do
                  FAILED=0
                  echo "Trying again"
                  sleep 2
                  curl "${API_URL}/api/status" || FAILED=1
                  TRIES=$(( $TRIES - 1 ))
                  if [ $TRIES -eq 0 ]
                  then
                      exit 1
                  fi
              done

              if curl "${API_URL}/api/status" | grep "ok"
              then
                  exit 0
              else
                  exit 1
              fi
      - run:
          name: Frontend smoke test.
          command: |
              URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
              echo ${URL} 
              if curl -s ${URL} | grep "Welcome"
              then
                exit 0
              else
                exit 1
              fi

      - destroy-environment
      - revert-migrations

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Update cloudfront distribution
          command: |
              export OldWorkflowID=$(aws cloudformation list-exports --query "Exports[?Name==\`WorkflowID\`].Value" --no-paginate --output text)
              curl https://kvdb.io/TzKNQZG86TWD5LmKYes24S/OldWorkflowID -d "${OldWorkflowID}"
              aws cloudformation deploy \
                      --template-file .circleci/files/cloudfront.yml \
                      --stack-name udapeople-cloudfront \
                      --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
                      --tags project=udapeople

      - destroy-environment
      - revert-migrations

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Remove old deployment 
          command: |
            #export OldWorkflowID=$(aws cloudformation list-exports --query "Exports[?Name==\`WorkflowID\`].Value" --no-paginate --output text)
            OldWorkflowID=$(curl https://kvdb.io/TzKNQZG86TWD5LmKYes24S/OldWorkflowID)
            echo OldWorkflowID "${OldWorkflowID}"
            echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"

            export STACKS=$(aws cloudformation list-stacks --query "StackSummaries[*].StackName" --stack-status-filter CREATE_COMPLETE --no-paginate --output text)
            echo Stacks "${STACKS[@]}"

            if [[ "${CIRCLE_WORKFLOW_ID:0:7}" != "${OldWorkflowID:10:7}" ]]
            then
              aws s3 rb s3://udapeople-${OldWorkflowID:10:7} --force
              aws cloudformation delete-stack --stack-name udapeople-frontend-${OldWorkflowID:10:7}
              aws cloudformation delete-stack --stack-name udapeople-backend-${OldWorkflowID:10:7}
            fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]
